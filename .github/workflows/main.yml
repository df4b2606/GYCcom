name: myapp CI CD pipeline
on:
  push:
    branches:
      - main
      - develop
      - cicd
 
  pull_request:
    branches:
      - main
      - develop

defaults:
  run:
    working-directory: ./backend
  
jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Give execute permission to mvnw
        run: chmod +x mvnw
      - name: Compile project
        run: ./mvnw clean compile 
      

      
  # test:
  #   runs-on: ubuntu-latest
  #   name: Test app
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Setup JDK
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: '17'
  #         distribution: 'corretto'
  #     - name: Cache Maven packages
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.m2/repository
  #         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-maven-
  #     - name: Give execute permission to mvnw
  #       run: chmod +x mvnw
  #     - name: Run Tests
  #       run: ./mvnw clean test
  #     - name: Upload test report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: test-results
  #         path: target/surefire-reports
  build:
    runs-on: ubuntu-latest
    name: Build app
    needs: [compile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Give execute permission to mvnw
        run: chmod +x mvnw
      - name: Build project
        run: ./mvnw clean package -DskipTests
  build-docker-image:
    runs-on: ubuntu-latest
    name: Build docker image
    needs: [ build ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Give execute permission to mvnw
        run: chmod +x mvnw
      - name: Build project
        run: ./mvnw clean package -DskipTests
      - name: Extract project version
        id: extract_version
        run: echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/myapp-api:${{steps.extract_version.outputs.VERSION}}
            ${{ secrets.DOCKERHUB_USERNAME }}/myapp-api:latest
          build-args: |
            PROFILE:dev
            APP_VERSION:${{steps.extract_version.outputs.VERSION}}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/myapp:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/myapp:buildcache,mode=max
  deploy:
    runs-on: ubuntu-latest
    name: Deploy app
    needs: build-docker-image
    steps:
      - name: Deploying to Render
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK }}
          image-url: ${{ secrets.DOCKERHUB_USERNAME }}/myapp-api:latest
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true
